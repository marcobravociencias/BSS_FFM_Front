package com.mx.totalplay.ffm.cloudweb.utilerias.service.impl;import com.google.gson.Gson;import com.google.gson.JsonObject;import com.mx.totalplay.ffm.cloudweb.plantainterna.service.ConsultaOTService;import com.mx.totalplay.ffm.cloudweb.utilerias.daos.GenericDao;import com.mx.totalplay.ffm.cloudweb.utilerias.model.ServiceResponseResult;import com.mx.totalplay.ffm.cloudweb.utilerias.service.GenericService;import java.io.ByteArrayInputStream;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.core.env.Environment;import org.springframework.stereotype.Service;@Servicepublic class ImplGenericService  implements GenericService {    private  final Logger logger = LogManager.getLogger(ImplGenericService.class.getName());    private Gson gson = new Gson();    private final GenericDao genericDao;    private final Environment environment;        @Autowired    private ConsultaOTService consultaOTService;    @Autowired    public ImplGenericService(GenericDao genericDao, Environment environment) {        this.genericDao = genericDao;        this.environment = environment;    }    @Override    public ServiceResponseResult getNombresTablas() {        ServiceResponseResult response = genericDao.getNombresTablas();        return response;    }    @Override    public ServiceResponseResult consultaQuery(String params) {        ServiceResponseResult result = ServiceResponseResult.builder().build();        JsonObject object = gson.fromJson(params, JsonObject.class);        if (object.get("query").getAsString().toUpperCase().indexOf(environment.getProperty("param.select_query")) == 0)            result = genericDao.consultarQuery(object.get("query").getAsString().toUpperCase());        else if (object.get("query").getAsString().toUpperCase().indexOf(environment.getProperty("param.insert_query")) == 0 || object.get("query").getAsString().toUpperCase().indexOf(environment.getProperty("param.update_query")) == 0)            result = genericDao.insetUpdateQuery(object.get("query").getAsString().toUpperCase());        else            result = ServiceResponseResult.builder()                    .isRespuesta(false)                    .resultDescripcion("No es una sentencia SQL.")                    .build();        return result;    }	@Override	public ByteArrayInputStream exporteExcelGenericRequest(String params) {		logger.info("ImplGenericService.class [metodo = exporteExcelGenericRequest() ] \n" + gson.toJson(params));		JsonObject jsonObject = gson.fromJson(params, JsonObject.class);		String tipoExcel = jsonObject.get("tipoExcel").getAsString();		switch (tipoExcel) {		case "consultaot-consultarordenes-pi":			return consultaOTService.exportarExcelConsultaOT(params);		default:			return null;		}			}}